// 문

// 1. 조건문
// 조건문은 지정된 표현식의 값에 따라 다른 문을 실행하기도, 실행하지 않기도 합니다.
// 이런 문은 코드에서 어떤 것을 결정하는 부분이며, 때때로 "분기점(branch)"이라고 부르기도 합니다.
// 코드가 인도하는 경로를 따라 자바스크립트 인터프리터가 움직인다고 상상해보면
// 조건문은 코드가 두 개 이상의 경로로 갈라지는 분기점이며 인터프리터는 반드시 그 경로 중 하나를 선택해야 합니다.

// 1.1 if
// if문은 자바스크립트가 조건에 따라 문을 실행할 수 있게 하는 기본적인 제어문입니다.

// if (expression: 조건, 표현식) {
//     statement; 실행문
// }

// 첫 번째로, 위와 같은 형태에서는 expression(표현식)을 평가합니다.
// 결괏값이 true와 같은 값이면, statement(실행문)을 실행합니다.
// expression이 false와 같은 값이면, statement을 실행하지 않습니다.

// 자바스크립트 문법은 if 키워드가 괄호를 둘러싼 표현식 뒤에 문 하나만 있어야 한다고 규정하지만,
// 문 블럭을 써서 여러 문을 하나로 모을 수도 있다.

if (!expression) {
    address = "";
    message = "정확한 주소를 입력하세요.";
}

// if 문의 두 번째 형태는 expression이 false로 평가될 때, 실행하는 else 절입니다.
// 문법은 다음과 같습니다.

if (expression) {
    statement1;
} else {
    statement2;
}

// 이런 형태는 expression이 true와 같은 값이면 statement1를 실행하고,
// false와 같은 값이면 statement2가 실행됩니다.

// 동등 연산자 vs 일치 연산자
// 동등 연산자: 타입이 달라도 자동으로 변환해서 비교
// 일치 연산자: 타입과 값이 모두 같아야 true
console.log(1 == "1"); // true: 문자열 "1"이 숫자 1로 변환되서 비교
console.log(1 === "1"); // false: 타입이 다름 number vs string

console.log(null == undefined); // true: 느슨한 동등 관계
console.log(null === undefined); // false: 타입이 다름 null vs undefined

const num = 0;

if (num === 1) {
    console.log("1개의 새로운 메시지가 있습니다.");
} else {
    console.log(`${num}개의 새로운 메시지가 있습니다.`);
}

// 1.2 else if
// if-else 문은 표현식을 평가하고 그 결과에 따라 두 코드 중 하나를 실행합니다.
// 하지만 선택지가 여럿이라면 어떻게 해야할까요? else if 문이 그런 방법 중 하나입니다.
// else if 문은 자바스크립트 문이 아니지만, if-else 문을 반복해서 사용해야 할 때 흔히 쓰는 관용적 표현입니다.

if (n === 1) {
    // 코드 블록 #1을 실행합니다.
} else if (n === 2) {
    // 코드 블록 #2를 실행합니다.
} else if (n === 3) {
    // 코드 블록 #3을 실행합니다.
} else {
    // 전부 실패하면 블록 #4를 실행합니다.
}

// 이 코드가 특별한 것은 없습니다.
// 그저 if 문을 연달아 썼고, 각 if가 이전 문의 else 절의 일부일 뿐입니다.
// 다음 코드는 문법적으로 동일하지만, 이렇게 쓰는 것보다는 else if를 쓰는 편이 읽기 쉽습니다.

if (n === 1) {
    // 코드 블록 #1을 실행합니다.
} else {
    if (n === 2) {
        // 코드 블록 #2를 실행합니다.
    } else {
        if (n === 3) {
            // 코드 블록 #3을 실행합니다.
        } else {
            // 전부 실패하면 블록 #4를 실행합니다.
        }
    }
}

// 1.3 switch

// if 문은 프로그램 실행 흐름에 분기점을 만들고, else if를 써서 분기점을 여럿 만들 수 있습니다.
// 하지만 모든 분기점이 같은 표현식의 값에 좌우된다면, else if가 최선의 선택이 아닐 수도 있습니다.
// => 코드상으로 낭비가 될 수 있습니다.
// 똑같은 표현식을 여러 if 문이 반복해 평가하는 것은 낭비입니다.

// switch 문으로 똑같은 상황에 대응할 수 있습니다.
// switch 문은 switch 키워드 뒤에 괄호를 들러싼 표현식을 쓰고
// 그 뒤에 중괄호로 ㄲ마산 코드 블록을 쓰는 형태입니다.

// switch (expression) {
//     statements;
// }

// switch 문의 정확한 문법은 이보다 복잡합니다.
// 코드 블록 곳곳에 case 키워드를 쓰고 그 뒤에 표현신과 콜론을 붙일 수 있습니다.
// switch 문이 실행되면 먼저 expression의 값을 계산한 후
// case 라벨의 표현식 중에서 expression과 같은 값으로 평가되는 것을 찾습니다.

// 이때, "같은" 값은 === 연산자(일치 연산자)를 기준으로 판단합니다.
// 일치하는 것을 찾으면 해당 case 코드 블록을 실행하기 시작합니다.
// 일치하는 case를 찾지 못하면 default: 라벨을 찾습니다.
// default: 라벨 조차 없으면 switch 문은 코드 블록 전체를 건너 뜁니다. => code pass

switch (n) {
    case 1: // n === 1이면 여기서 시작합니다.
        // 코드 블록 #1을 실행합니다.
        break; // 여기서 멈춥니다.
    case 2: // n === 2이면 여기서 시작합니다.
        // 코드 블록 #2를 실행합니다.
        break; // 여기서 멈춥니다.
    case 3: // n === 3이면 여기서 시작합니다.
        // 코드 블록 #3을 실행합니다.
        break; // 여기서 멈춥니다.
    default:
        // 코드 블록 #4를 실행합니다.
        break; // 여기서 멈춥니다.
}

// 이 코드에서는 각 case의 마지막에 break 키워드를 썼습니다.
// break 문은 switch 문의 끝으로 빠져나가서 이어지는 문을 실행하게 하는 명령어입니다.
