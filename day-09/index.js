// 1. 객체

// 객체는 자바스크립트의 가장 기본적인 데이터 타입이며, 이미 살펴본 적이 있습니다.
// 객체는 복합된 값이다. 객체는 여러 가지 값(기본 값이나 다른 객체)을 모아서 이름을 통해 값을 저장하고 가져올 수 있게 합니다.
// 객체는 프로퍼티의 순서 없는 집합이며 각 프로퍼티에는 이름과 값이 있습니다. (key-value)
// 프로퍼티 이름은 보통 문자열이므로 객체가 문자열에 값을 연결한다고 볼 수도 있습니다.

// 하지만, 객체는 단순히 문자열과 값을 연결한 것은 아닙니다.
// 자바스크립트 객체는 자신만의 프로퍼티를 가지는 것 외에도, '프로토타입'으로 불리는 다른 객체에서 프로퍼티를 상속하기도 합니다.

// 객체의 메서드는 일반적으로 상속된 프로퍼티이며, 이 '프로토타입 상속'이 자바스크립트의 중요한 기능입니다.
// 자바스크립트 객체는 동적이기 때문에 일반적으로 프로퍼티를 추가하거나 삭제할 수 있지만,
// 정적인 객체를 흉내 낼 수도 있고, 정적 타입을 사용하는 언어의 구조 역시 사용할 수 있습니다.

// 자바스크립트에서 문자열, 숫자, 심벌, 불린, null, undefined가 아닌 값은 전부 객체(Object)입니다.

// 1.1 객체 생성
// 객체를 생성할 때는 객체 리터럴, new 키워드 또는 Object.create() 함수를 사용합니다.

// 1.1.1 객체 리터럴
// 객체를 생성하는 가장 쉬운 방법은 객체 리터럴입니다.
// 객체 리터럴의 가장 단순한 형태는 콜론(:)으로 구분한 이름: 값 쌍을 콤마로 구분해 중괄호로 감싼 형태입니다.
// 프로퍼티 이름은 자바스크립트 식별자 또는 문자열 리터럴이고, 빈 문자열도 허용합니다.

let empty = {}; // 프로퍼티가 없는 객체
let point = {
    x: 0,
    y: 0,
}; // 숫자 프로퍼티 2개
let book = {
    "main title": "자바스크립트", // 프로퍼티 이름에 스페이스(공백)와 하이픈(-)이 들어 있으므로 문자열 리터럴을 썼습니다.
    "sub-title": "자바스크립트 완벽 가이드",
    author: {
        firstName: "David",
        lastName: "Flamenco",
    },
};

// 1.1.2 new
// new 연산자는 새 객체를 생성하고 초기화합니다.
// new 키워드 뒤에는 반드시 함수 호출이 있어야 합니다.
// 이런 형태로 사용하는 함수를 생성자라고 부르고, 새로 생성된 객체를 초기화하는 목적으로 사용합니다.

let obj = new Object(); // 빈 객체를 만듭니다. {}와 같습니다.
let arr = new Array(); // 빈 배열을 만듭니다. []와 같습니다.
let date = new Date(); // 현재 시간을 나타내는 Date 객체를 만듭니다.
let record = new Map(); // 키와 값을 연결하는 Map 객체를 만듭니다.

// 1.1.3 프로토타입
// 객체를 생성하는 세 번째 방법을 설명하기 전에 반드시 프로토타입에 대해 잠시 살펴봐야 합니다.
// 자바스크립트는 프로토타입 기반 언어라고 부릅니다.
// 자바스크립트 객체 거의 대부분은 자신과 연결된 두 번째 객체를 갖습니다.
// 여기서 두 번째 객체를 프로토타입이라고 부르며, 첫 번째 객체는 프로토타입에서 프로퍼티를 상속합니다.

// 객체 리터럴을 사용해 생성한 객체는 모두 같은 프로토타입 객체를 갖습니다.
// 그리고 이 프로토타입 객체는 Object.prototpye이라는 코드로 참조할 수 있습니다.

// new 키워드와 생성자를 사용해 만든 객체는 생성자 함수의 prototype 프로퍼티 값을 자신의 프로토타입으로 사용합니다.
// 따라서 new Object()로 생성한 객체는 {}(객체 리터럴 방식)로 생성한 객체와 마찬가지로 Object.prototype에서 상속합니다.

// 마찬가지로 new Array()를 사용해 생성한 객체(배열)의 프로토타입은 Array.prototype이며,
// new Date()를 사용해 생성한 객체의 프로토타입은 Date.prototype입니다.

// 1.1.4 Object.create()
// Object.create()는 첫 번째 인자를 프로토타입 삼아 새 객체를 생성합니다.
let newObj = Object.create({ x: 1, y: 2 }); // newObj x와 y 프로퍼티를 상속합니다.
console.log(newObj.x + newObj.y); // 3

// 인자로 null을 전달해 프로토타입이 없는 객체를 생성할 수도 있지만,
// 이렇게 생성한 객체는 아무것도 상속하지 않으며 toString() 같은 기본 메서드 조차 없습니다.
let newObj2 = Object.create(null);

// {}나 new Object()가 반환하는 것처럼 일반적인 빈 객체를 만들고 싶을 때는 Object.prototype을 전달합니다.
let newObj3 = Object.create(Object.prototype); // newObj3는 {}나 new Object()와 같습니다.

console.log(newObj);
console.log(newObj2);
console.log(newObj3);

// 1.2 프로퍼티 검색과 설정
// 프로퍼티 값에 접근할 때는 점(.)이나 대괄호([]) 연산자를 사용합니다.
// 이 연산자의 왼쪽은 값이 객체인 표현식이어야 합니다.

// 점 연산자를 사용한다면 오른쪽은 반드시 프로퍼티 이름인 단순한 식별자여야 합니다.
// 대괄호를 사용한다면 그 안에 있는 값은 원하는 프로퍼티 이름인 문자열로 평가되는 표현식이어야 합니다.

let author = book.author; // book의 author 프로퍼티를 가져옵니다.
let name = `${author.firstName} ${author.lastName}`; // author의 firstName과 lastName 프로퍼티를 가져옵니다.
let title = book["main title"]; // book의 main title 프로퍼티를 가져옵니다.

// 프로퍼티를 생성하거나 설정할 때는 값을 가져올 때와 마찬가지로 점 또는 대괄호를 사용하고
// 이들을 할당 표현식의 왼쪽에 써야합니다.
book.edition = 10;
book["main title"] = "NEW 자바스크립트";
