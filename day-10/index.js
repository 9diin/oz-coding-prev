// 배열
// 배열은 값의 순서가 있는 집합이며, 각 값을 요소라고 부르며 각 요소에는 배열에서 차지하는 위치를 나타내는 숫자인 인덱스가 있습니다.
// 자바스크립트 배열에는 타입이 없습니다. 배열 요소는 어떤 타입이든 상관없고, 배열 하나에서 여러 타입이 섞여 있어도 괜찮습니다.
// 배열 요소에 객체나 다른 배열을 써도 상관없으므로 객체로 이루어진 배열이나 배열로 이루어진 배열 같은 복잡한 데이터 구조를 만들 수도 있습니다.
// 배열의 첫 번째 요소의 인덱스는 1이 아니라 0으로 시작합니다.

// 자바스크립트 배열은 동적입니다.
// 필요한 만큼 배열의 크기가 커지거나 작아질 수 있고, 배열을 생성할 때 고정된 크기를 선언하거나 크기가 변할 때 배열을 재할당할 필요가 없습니다.
// 자바스크립트는 성긴 배열(sparse)을 허용합니다. 즉 요소의 인덱스가 꼭 이어질 필요가 없고, 그 사이에 값이 없어도 된다 혹은 갭이 있어도 된다.

// 1. 배열 생성
// - 배열 리터럴
// - 이터러블(반복 가능한) 객체의 분해 연산자 ... 적용
// - Array() 생성자
// - Array.of()와 Array.from() 팩토리 메서드

// 1.1 배열 리터럴
// 배열을 만드는 가장 단순한 방법은 배열 리터럴입니다.
// 배열 리터럴은 배열 요소를 대괄호 안에서 콤마로 구분한 리스트 형태입니다.

let empty = []; // 요소가 없는 배열
let nums = [1, 2, 3, 4, 5]; // 타입이 숫자인 요소가 5개 있는 배열
let mix = [1.1, true, "문자열 데이터"]; // 타입이 다른 요소가 3개인 배열

let base = 1024;
let table = [base, base + 1, base + 2, base + 3];
console.log(table);

// 배열 리터럴 안에 객체 리터럴이나 다른 배열 리터럴을 써도 됩니다.

let a = [
    [1, { x: 1, y: 2 }],
    [2, { x: 3, y: 4 }],
];

// 배열 리터럴에 콤마를 연속해서 썼는데, 그 사이에 값이 없으면 성긴 배열이 만들어집니다.
let b = [, , ,]; // 값을 생략한 위치에 실제로 배열 요소가 존재하지는 않지만, 검색하면 undefined가 반환됩니다.
let count = [1, , 3]; // 인덱스 0과 2에는 요소가 있지만, 인덱스 1에는 요소가 없습니다.
let undefs = [, ,]; // 요소가 없지만 길이가 2인 배열

// 마지막 쉼표 뒤에 아무것도 오지 않으면, 배열 길이를 계산할 때 해당 슬롯은 포함되지 않습니다.
console.log(b.length); // 3 => 쉼표(,)를 사용하여 배열을 선언할 때, 배열의 길이는 마지막 쉼표 뒤에 요소가 없으면 카운트되지 않습니다.
console.log(count.length); // 3
console.log(undefs.length); // 2 => 쉼표(,)를 사용하여 배열을 선언할 때, 배열의 길이는 마지막 쉼표 뒤에 요소가 없으면 카운트되지 않습니다.

// 1.2 분해 연산자
// 분해 연산자 ...를 써서 배열 리터럴 안에 다른 배열 요소를 넣을 수 있습니다.

let c = [1, 2, 3];
let d = [0, ...c, 4]; // d == [0, 1, 2, 3, 4]

// 분해 연산자 같은 경우에는 배열을 얕게(shallow) 복사할 때 유용합니다.

let original = [1, 2, 3];
let copy = [...original];

console.log("========== 테스트 01 ==========");
console.log(original); // [1, 2, 3]
console.log(copy); // [1, 2, 3]
console.log(original === copy); // false

// 1.3 Array() 생성자
// - 인자 없이 호출
let newArr1 = new Array(); // 요소가 없는 빈 배열을 생성하며 배열 리터럴 []과 동등합니다.

// - 배열 길이를 나타내는 숫자 인자 하나로 호출
let newArr2 = new Array(5); // 지정된 길이를 가진 배열을 생성합니다. 배열 요소가 몇 개인지 미리 알고 있으면 해당 방법을 사용할 수 있습니다.

// - 배열 요소를 두 개 이상 쓰거나 숫자가 아닌 요소를 하나만 넘겨 호출
let newArr3 = new Array(5, 4, 3, 2, 1, "문자열 데이터 01", "문자열 데이터 02"); // 다음과 같이 사용ㅇ하면 생성자의 인자가 새 배열의 요소가 됩니다.

console.log(newArr1);
console.log(newArr2);
console.log(newArr3);
