// 브라우저 렌더링 과정
// 웹 브라우저에서 웹 페이지를 만들 때, HTML & CSS & 자바스크립트 같은 파일들을 읽어서 화면에 보여주잖아요?
// 이 과정에서 중요한 게 바로 파싱(parsing)입니다.

// 1. 파싱
// 파싱은 말 그대로 "읽고 해석하는 과정"이에요.
// 우리가 VS Code에 HTML, CSS, 자바스크립트를 작성하면 브라우저는 그 코드를 "파싱"하면서 어떤 내용인지 이해하고,
// 이를 화면에 표시하기 위한 구조로 바뀝니다.

// => HTML, CSS, 자바스크립트 파일들이 코드로 작성되면, 브라우저는 먼저 그 코드를 읽고 (이를 '파싱'이라고 합니다.)
// => 그 코드가 어떤 의미인지를 "해석"해서, 어떻게 화면에 표시할지 계획을 세웁니다.
//    예를 들어, <h1>제목</h1>라는 HTML 코드가 있으면, 브라우저는 "이건 제목이구나"라고 이해하고, 화면에 제목을 크게 표시합니다.
// => 브라우저는 이 해석한 정보를 트리 구조로 만들어요. 트리 구조란, 나무처럼 여러 가지 정보가 계층적으로 연결된 구조를 말합니다.
//    이렇게 만들어진 트리 구조를 바탕으로 실제 화면에 내용을 표시하게 됩니다.

// 간단히 예시로 비유하자면:
// - 코드 = 책
// - 브라우저 = 그 책을 읽고 내용을 이해하려는 사람
// - 파싱 = 책을 읽고 중요한 내용만 뽑아서 이해하는 과정
// - 트리 구조 - 책의 내용을 이해하고, 중요한 부분을 체계적으로 정리하는 방법

// 2. 렌더링(Rendering)
// 렌더링은 HTML, CSS, 자바스크립트로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 말합니다.
// 브라우저는 HTML, CSS, 자바스크립트, 이미지, 폰트 파일 등 렌더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다.

// 우리가 웹 사이트를 볼 때, 브라우저가 화면에 웹 페이지를 그리는 과정을 렌더링이라고 합니다.
// 여기서 말하는 렌더링은 웹 페이지를 보여주는 '그리기' 과정입니다.

// => 서버에서 파일을 받아온다.
//    브라우저가 HTML, CSS, 자바스크립 같은 웹 페이지를 구성하는 파일들을 서버에서 받아옵니다.
//    서버는 웹 페이지를 만들기 위해 필요한 모든 파일을 보내주는 역할을 합니다.
// => 브라우저는 파일을 읽는다.
//    브라우저는 이 파일들을 읽어서 화면에 어떻게 보여줄지 이해해햐 합니다. 이를 파싱(읽고 해석하는 과정)이라고 했습니다.

// 파싱 후
// 1. HTML -> DOM(Document Object Model)
// HTML 파일을 읽은 브라우저는 DOM이라는 "자료 구조"를 만듭니다. 이건 웹 페이지의 구조를 나타내는 트리 형태의 정보입니다.
// 예를 들어, <div>, <h1>, <p> 같은 HTML 태그들이 트리 구조로 연결됩니다.

// 2. CSS -> CSSOM(CSS Object Model)
// CSS는 페이지의 스타일을 정의합니다. 브라우저는 CSS를 읽고, CSSOM을 만들어서 페이지의 스타일을 어떻게 적용할지 계산합니다.

// 3. DOM + CSSOM -> 렌더 트리(Render Tree)
// 브라우저는 DOM과 CSSOM을 합쳐서 렌더 트리를 만듭니다. 이 트리는 화면에 어떻게 표시될지 정리된 "그림"이라고 생각하면 됩니다.

// 4. 자바스크립트
// 자바스크립트는 동적인 기능을 추가하는 코드인데,
// 이 코드는 브라우저의 자바스크립트 엔진에서 처리됩니다.
// 자바스크립트도 파싱을 거쳐 AST(추상 구문 트리)라는 자료 구조로 변환되어 실행됩니다.
// 자바스크립트는 페이지의 동작을 제어하는 역할을 합니다.

// 단계별 비유
// 1. 서버에서 파일을 받아오는 건 마치 음악 CD를 샀다고 생각하는 거예요. 이제 그걸 들어야 해요.
// 2. HTML을 파싱하는 건 그 CD의 곡 리스트를 보는 것과 비슷해요. 어떤 곡들이 있는지(구조) 파악하는 단계죠.
// 3. CSS는 곡마다 악기나 연주 방식을 설정하는 것과 같아요. 예를 들어, "이 곡은 드럼을 크게!" 이러너 스타일을 지정하는 거죠.
// 4. 렌더 트리는 그 모든 걸 합쳐서 완성된 악보처럼 그려지는 페이지를 만드는 거예요.
// 5. 자바스크립트는 그 악보 위에서 실제로 연주가 어떻게 이루어질지 지시하는 역할을 합니다.

// 핵심 요약:
// 렌더링: 웹 페이지를 그리는 과정
// 파싱: HTML, CSS, 자바스크립트를 읽고 해석하는 과정
// DOM: HTML 구조, CSSOM: CSS 스타일 정보, 렌더 트리: 화면에 그려질 내용
// 자바스크립트: 페이지의 동작을 제어

// 자주 쓰는 DOM API 요약 정리표

// 요소 선택
document.getElementById(id); // ID로 요소 선택
document.getElementsByClassName(className); // 클래스명으로 요소를 선택
document.getElementsByTagName(tag); // 태그명으로 요소를 선택
document.querySelector(css); // CSS 선택자로 첫 번째 요소 선택
document.querySelectorAll(css); // CSS 선택자로 모든 요소 선택

// 클래스 조작
element.classList.add("class"); // 클래스 추가
element.classList.remove("class"); // 클래스 제거
element.classList.toggle("class"); // 클래스가 있으면 제거, 없으면 추가
element.classList.contains("class"); // 클래스 포함 여부 확인

// 콘텐츠 변경
element.textContent; // 텍스트 설정/읽기 (공백 포함)
element.innerText; // 사용자에게 보이는 텍스트
element.innerHTML; // HTML 포함 콘텐츠 설정/읽기

// 스타일 변경
element.style.color = "red"; // 인라인 스타일 변경
getComputedStyle(element); // 실제 적용된 스타일 값 읽기

// 이벤트 처리
element.addEventListener(event, fn); // 이벤트 핸들링 등록
element.removeEventListener(event, fn); // 이벤트 핸들러 제거
