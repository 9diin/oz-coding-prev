// 1. 변수
// 변수란 프로그래밍 언어에서 데이터를 관리하기 위한 핵심 개념입니다.
// 변수(Variable)는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름입니다.
// 간단히 말하자면, 변수는 프로그래밍 언어에서 값을 저장하고 참조하는 매커니즘으로 값의 위치를 가리키는 상징적인 이름입니다.
// 상징적인 이름인 변수는 프로그래밍 언어의 컴파일러 또는 인터프리터에 의해 값이 저장된 메모리 공간의 주소로 치환되어 실행됩니다.
// 따라서 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가 없고, 변수를 통해 안전하게 값에 접근할 수 있습니다.

// 1.1 식별자
// 변수 이름을 "식별자"라고도 합니다.
// 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말합니다.
// 사람을 이름으로 구별해서 식별하는 것처럼 값도 식별자로 구별하여 식별할 수 있습니다.
// 값은 메모리 공간에 저장되어 있습니다. 따라서 식별자는 메모리 공간에 저장되어 있는 어떤 값을 구별해서 식별해 낼 수 있어야 합니다.
// 이를 위해 식별자는 어떤 값이 저장되어 있는 메모리 주소를 기억(저장)해야 합니다.

// let username = "개발자 9Diin";

// username ===============> abcdefg ===============> ["개발자 9Diin"]
// 변수 이름(식별자)             메모리 주소                 메모리, 값

// 1.2 변수 선언
// 변수 선언이란, 변수를 생성하는 것을 말합니다.
// 즉, 값을 저장하기 위한 메모리 공간을 확보하고, 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것입니다.
// 변수를 사용하라면 반드시 선언이 필요합니다.
// 변수를 사용할 때는 let과 const 키워드를 사용합니다.

// let: 키워드, score: 식별자(변수)
// 세미콜론은 코드의 의미를 명확히 하는데 중요한 역할을 합니다.
let score; // 변수 선언(변수 선언문)

// 위 코드에서 변수를 선언한 이후, 아직 변수에 값을 할당하지 않았습니다.
// 따라서 변수 선언에 의해 확보된 메모리 공간은 비어 있을 것으로 생각할 수 있으나
// 자바스크립트 엔진에 의해 확보된 메모리 공간에는 undefined라는 값이 암묵적으로 할당되어 초기화됩니다.

// - 선언 단계: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
// - 초기화 단계: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.

console.log(score); // undefined
console.log(username); // Cannot access 'username' before initialization

// Cannot access 'username' before initialization 에러가 발생하는 이유는
// 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임(Runtime)이 아니라 그 이전 단계에서 먼저 실행되기 때문입니다.

let username;
console.log(username); // undefined

username = "개발자 9Diin"; // 값의 할당
console.log(username); // 개발자 9Diin

let email = "9diin@gmail.com"; // 변수 선언과 값의 할당

// 변수 선언은 소스 코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만,
// 값의 할당은 소스 코드가 순차적으로 실행되는 시점인 런타임에 실행된다.

console.log(job); // Cannot access 'job' before initialization

let job;
console.log(job); // undefined

job = "developer";
console.log(job); // developer
